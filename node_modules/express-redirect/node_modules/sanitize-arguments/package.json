{
  "name": "sanitize-arguments",
  "description": "Easily check function arguments",
  "version": "2.0.3",
  "author": {
    "name": "Jan Buschtöns",
    "email": "buschtoens@gmail.com"
  },
  "contributors": [
    {
      "name": "Jan Buschtöns",
      "email": "buschtoens@gmail.com",
      "url": "https://github.com/silvinci"
    },
    {
      "name": "Jason Brumwell",
      "url": "https://github.com/jbrumwell"
    }
  ],
  "license": "MIT",
  "keywords": [
    "validation",
    "sanitization",
    "validate",
    "sanitize",
    "arguments"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/silvinci/sanitize-arguments"
  },
  "main": "index",
  "engines": {
    "node": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "scripts": {
    "prepublish": "npm prune",
    "test": "make test"
  },
  "readme": "![sanitize-arguments — Order arguments with ease!](http://i.imgur.com/SAhDs.png)\r\n\r\n[![Build Status](https://secure.travis-ci.org/silvinci/node-sanitize-arguments.png?branch=master)](https://travis-ci.org/silvinci/node-sanitize-arguments)\r\n\r\n```javascript\r\nvar sanitize = require(\"sanitize-arguments\");\r\n\r\nfunction Person(name, birthdate, size, pets, ability) {\r\n  var args = sanitize(arguments, Person, [String, Date, Number, Array, Function]);\r\n  \r\n  // Now we can be sure that all arguments are in the right order\r\n  this.properties = {\r\n    name: args.name,\r\n    birthdate: args.birthdate,\r\n    size: args.size,\r\n    pets: args.pets,\r\n    ability: args.ability\r\n  };\r\n  \r\n  console.log(this.properties);\r\n}\r\n\r\n// Even if someone totally fucks up the order and leaves out some arguments\r\nnew Person(\"silvinci\", 180, [\"dog\", \"cat\"]);\r\n// we still get the right order:\r\n// { name: \"silvinci\", size: 180, pets: [\"dog\", \"cat\"], birthdate: undefined, ability: undefined }\r\n```\r\n\r\nInstallation\r\n============\r\n\r\nJust grab it with the awesome npm.\r\n\r\n    $ npm install sanitize-arguments\r\n\r\nOr clone the repository.\r\n\r\n    $ git clone git://github.com/silvinci/node-sanitize-arguments\r\n\r\nUsage\r\n=====\r\n\r\nThere are two ways of using `sanitize`. The example above shows the first (and prefered) one.\r\nThe first argument is your `arguments` object, which contains all supplied values passed to the function.\r\nThe second one is the `Function` itself. The third one is an `Array` of `Types` or `Objects`\r\nindicating the desired order. It's similiar to Java's `function(String name, Date birthdate, ...)`.\r\nWe just take our \"strong types\" out of the warehouse and put them into `sanitize`.\r\n\r\nWhen giving these three `arguments` to `sanitize` it will return an object where all the values are\r\npaired with their correct variable name and undefined values stay undefined, like so:\r\n```javascript\r\n{\r\n  name: \"silvinci\",\r\n  birthdate: undefined,\r\n  size: 180,\r\n  pets: [\"dog\", \"cat\"],\r\n  ability: undefined\r\n}\r\n```\r\nIt *also* effectively changes the `arguments` object, thus altering the `function`'s variables aswell.\r\nBut this doesn't work in every case. First of all: This won't work in strict mode, because the magic link\r\nbetween `arguments` and its variables is disabled. You also have to make sure that you *always* apply\r\nthe full count of arguments when calling your function, since only defined variables can be changed\r\nvia `arguments`.\r\n\r\nOnly when you can be sure, that you're code won't ever run in strict mode and your function *always*\r\ngets called with the full count of arguments, that may be swapt, then you can use `sanitize` in\r\nanother, even more comfortable way.\r\n```javascript\r\nfunction test(a, b, c, d, e)\r\n  sanitize(arguments, [String, Date, Number, Array, Function]);\r\n  console.log(a, b, c, d, e);\r\n}\r\n```\r\n\r\nUsing the magic link the variables are changed and you don't have to use the returned object.\r\nPlease note, that `sanitize` will still return an object: the altered `arguments` so you could\r\nacces the arguments by `returned[0]` too.\r\n\r\nExtras\r\n======\r\n\r\n`sanitize` comes with some extra sugar for you. It exposes the typechecks it uses itself.\r\n- `typeOf(object)` is a `typeof` like you would expect it to be.\r\n  For instance `typeOf([])` returns \"Array\" and not \"object\", like 'typeof []' does.\r\n- `nameOf(Function)` returns a function's name. Useful for passed in functions.\r\n- `argsOf(Function)` returns an array of the expected arguments.\r\n\r\nContributing\r\n============\r\n\r\nI happily accept pull requests and work on issues!\r\n\r\nContributors\r\n============\r\n\r\n- [jbrumwell](https://github.com/jbrumwell)\r\n\r\n\r\n---\r\n\r\nLicense\r\n=======\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Jan Buschtöns &lt;buschtoens@gmail.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "sanitize-arguments@2.0.3",
  "dist": {
    "shasum": "5bd8340bcd5bf060cbee9a776186cc71bba8b84f",
    "tarball": "http://registry.npmjs.org/sanitize-arguments/-/sanitize-arguments-2.0.3.tgz"
  },
  "_npmVersion": "1.1.70",
  "_npmUser": {
    "name": "silvinci",
    "email": "buschtoens@gmail.com"
  },
  "maintainers": [
    {
      "name": "silvinci",
      "email": "buschtoens@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "5bd8340bcd5bf060cbee9a776186cc71bba8b84f",
  "_resolved": "https://registry.npmjs.org/sanitize-arguments/-/sanitize-arguments-2.0.3.tgz",
  "_from": "sanitize-arguments@>=2.0.0 <2.1.0"
}
